/*
 * Copyright (c) 2018 NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

mdl 1.3;

import state::*;
import base::*;
import df::*;
import math::*;


//
// Fish material
//

export color checker(float factor) {
    float3 pos = state::position();
    float3 f = math::abs(pos) * factor;
    int t = (int(f.x) ^ int(f.y) ^ int(f.z)) & 0xFF;
    return color(t/255.0);
}

export float3 disp()
{
    float3 cell_uvw = state::texture_coordinate(0);

    float disp_factor = 0.003 * math::sin(cell_uvw.x * math::PI) *
        math::sin(cell_uvw.y * math::PI);

    return state::normal() * disp_factor;
}

export material Fish() = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: checker(5000))
    ),
    geometry: material_geometry(
        displacement: disp()
    )
);


//
// FishRings material
//

export material FishRings() =
let {
    float amp = math::max(0, math::sin(state::position().x * 80 * math::PI));
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: color(1, 1 - amp * 0.75f, 1 - amp * 0.75f))
    ),
    geometry: material_geometry(
        displacement: state::normal() * amp * 0.003f
    )
);
