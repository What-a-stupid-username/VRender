/*
 * Copyright (c) 2018 NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

mdl 1.3;

import state::*;
import df::*;
import base::*;
import math::*;
import tex::*;

//
// Functions used for environments
//

export base::texture_return sun_and_sky(
    uniform texture_2d clouds = texture_2d("skybox.dds"))
{
    // Mirror x component of direction to make texture borders less visible
    float3 dir = state::direction();
    dir.x = math::abs(dir.x);

    return base::sun_and_sky(
        sun_disk_scale: 10,
        ground_color:   color(0.4, 0, 0),
        sun_direction:  float3(0.8, 0.1, 0),
        haze: 3 * base::file_texture(
                clouds,
                mono_source: base::mono_luminance,
                uvw: base::texture_coordinate_info(
                    dir, float3(1,0,0), float3(0,1,0))
            ).mono
    );
}

export color perez_sun_and_sky()
{
    return base::perez_sun_and_sky(
        direct_normal_irradiance: 0.017,
        diffuse_horizontal_irradiance: 0.005
    );
}

export color cubemap(uniform texture_cube env = texture_cube("skybox.dds"))
{
    return tex::lookup_color(env, state::direction());
}


//
// M_textured material
//

export color mix_textures(uniform texture_2d tex_1, uniform texture_2d tex_2)
{
    return (base::file_texture(tex_1).tint + 0.2) * (base::file_texture(tex_2).tint + 0.2);
}

export material M_textured(
    uniform texture_2d tex_1 = texture_2d("logo.png"),
    uniform texture_2d tex_2 = texture_2d("checker.png")
) = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: mix_textures(tex_1, tex_2))
    )
);


//
// M_checker material
//

export color checker(float factor) {
    float3 pos = state::position();
    float3 f = math::abs(pos) * factor;
    int t = (int(f.x) ^ int(f.y) ^ int(f.z)) & 0xFF;
    return color(t / 255.0);
}

export material M_checker() = material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: checker(100))
    )
);


//
// M_bump_worley material
//

export material M_bump_worley(
    color c                       = color(0.5, 0.5, 0.5),
    uniform float3 rotation       = float3(0.),
    uniform float3 translation    = float3(0.),
    uniform float3 scaling        = float3(10),
    uniform float  threshold_low  = 0.,
    uniform float  threshold_high = 1.)
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: c)
    ),
    geometry: material_geometry(
        normal: base::worley_noise_bump_texture(
            uvw: base::transform_coordinate(
                transform: base::rotation_translation_scale(
                    rotation: rotation,
                    translation: translation,
                    scaling: scaling)
            ),
            size: 1.,
            apply_marble: false,
            apply_dent: false,
            noise_distortion: float3( 0.0 ),
            noise_threshold_high: threshold_high,
            noise_threshold_low: threshold_low,
            factor: 130
        )
    )
);


//
// M_bump_worley_small material
//

export material M_bump_worley_small( * )
= M_bump_worley( scaling: float3(40) );


//
// M_bump_texture material
//

export material M_bump_texture(
    color c = color(0.5, 0.5, 0.5),
    uniform texture_2d tex = texture_2d("bumpmap.png"))
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: c)
    ),
    geometry: material_geometry(
        normal: base::file_bump_texture(
            tex,
            130,
            uvw: base::texture_coordinate_info(
                position: state::texture_coordinate(0) * 10)
      )
    )
);
